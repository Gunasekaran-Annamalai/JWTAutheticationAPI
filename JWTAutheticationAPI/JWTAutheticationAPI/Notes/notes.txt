Creating separate repositories for interfaces and implementation classes in .NET Web API, especially when dealing with data access and business logic, is a good practice that aligns with the principles of separation of concerns and modularity. Here are some reasons why you might want to consider this approach:

Separation of Concerns:
Code Organization: Keeping interfaces and implementations separate helps organize your codebase. It makes it easier to locate and understand different components of your application.
Maintenance: Changes to the implementation details won't affect the interface, and vice versa. This separation makes maintenance and updates more straightforward.

Dependency Injection:
Testability: Using dependency injection (DI) becomes more natural when you have clear interfaces. You can easily swap implementations for testing purposes, mock dependencies, or replace components without modifying the controller code.
Loose Coupling: DI helps in achieving loose coupling between components. The controller doesn't need to know the details of the implementation; it only relies on the interface.

Reusability:
Interface Reuse: Interfaces can be reused across different implementations. This can be valuable if you have multiple implementations for different scenarios or if you want to switch implementations based on certain conditions.
Implementation Reuse: If you have common functionality shared among different controllers, having separate implementation classes allows you to reuse that code without duplicating it.

Future Changes: 
If you need to change the implementation or add new features, having a clear separation allows you to make modifications without affecting the overall structure of the controller.
Scalability: As your application grows, having a modular structure makes it easier to scale and maintain.
Readability and Understandability:

Code Readability: 
Separating concerns improves the readability of your code. Someone reviewing your code can quickly grasp the structure and purpose of different components.
Collaboration: It facilitates collaboration among team members by providing a clear structure that follows best practices.